import TelegramBot from 'node-telegram-bot-api';
import {Storage} from './Storage.js';
import {Entry} from './Entry.js';
import {addDays, differenceInCalendarDays, format, parse, setDate, setMonth, setYear} from "date-fns";
import {ru} from "date-fns/locale";
import schedule from "node-schedule";

export class Bot {
    bot;

    constructor(token) {
        this.bot = new TelegramBot(token, {polling: true});
    }

    start() {
        this.bot.on("polling_error", console.info);

        this.bot.onText(/\/start/, (msg) => {
            this.bot.sendMessage(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n' +
                '/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ–ª–≥–∏/–¥–æ—Ö–æ–¥—ã\n' +
                '/add - –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–≥ –∏–ª–∏ –¥–æ—Ö–æ–¥\n' +
                '/edit - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å\n' +
                '/delete - —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å');
        });

        this.bot.onText(/\/list/, (msg) => this.listEntries(msg));

        this.bot.onText(/\/add/, (msg) => this.addEntry(msg));

        this.bot.onText(/\/delete/, (msg) => this.deleteEntry(msg));
        this.scheduleDailyNotifications();
    }

    scheduleDailyNotifications() {
        schedule.scheduleJob('0 10 * * *', () => {
            const allUsers = Storage.getAllUsers(); // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ Storage –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            allUsers.forEach(userID => this.notifyUser(userID));
        });
    }

    notifyUser(userID) {
        const now = new Date();
        const entries = Storage.listEntries(userID);
        const today = new Date();

        // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ —Å —É—á–µ—Ç–æ–º –±–ª–∏–∂–∞–π—à–∏—Ö –¥–∞—Ç
        const upcomingEntries = entries.filter(entry => {
            let entryDate = entry.date;
            if (entry.repeat) {
                // –°–¥–≤–∏–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
                entryDate = setYear(setMonth(setDate(entryDate, entry.date.getDate()), now.getMonth()), now.getFullYear());
                if (entryDate < today) {
                    entryDate = addDays(entryDate, 30); // –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
                }
            }

            entry.date = entryDate;

            const diff = differenceInCalendarDays(entry.date, today);

            return 0 <= diff && diff <= 7;
        });

        if (upcomingEntries.length > 0) {
            upcomingEntries.sort((a, b) => a.date - b.date)
            const message = upcomingEntries.map((entry, index) =>
                `
${index + 1}. ${entry.type === 'debt' ? 'üí∏ –î–æ–ª–≥' : 'üí∞ –î–æ—Ö–æ–¥'} - ${entry.amount} ‚ÇΩ
–î–∞—Ç–∞: ${entry.date ? format(entry.date, 'eeeeee, dd-MMM-yyyy', {locale: ru}) : '-'} 
–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${differenceInCalendarDays(entry.date, now)}
–ù–∞–∑–≤–∞–Ω–∏–µ: ${entry.description}
`
            ).join('\n\n');

            this.bot.sendMessage(userID, `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—ã–ø–ª–∞—Ç–∞—Ö –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏:\n\n${message}`);
        }
    }

    listEntries(msg) {
        const entries = Storage.listEntries(msg.chat.id);
        if (entries.length === 0) {
            this.bot.sendMessage(msg.chat.id, '–ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.');
        } else {
            const response = entries.map((entry, index) =>
                `
${index + 1}. ${entry.type === 'debt' ? 'üí∏ –î–æ–ª–≥' : 'üí∞ –î–æ—Ö–æ–¥'} - ${entry.amount} ‚ÇΩ
–î–∞—Ç–∞: ${entry.date ? format(entry.date, 'eeeeee, dd-MMM-yyyy', {locale: ru}) : '-'}
–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü: ${entry.repeat ? '–î–∞' : '–ù–µ—Ç'}
–ù–∞–∑–≤–∞–Ω–∏–µ: ${entry.description}`
            ).join('\n\n');
            this.bot.sendMessage(msg.chat.id, response);
        }
    }

    addEntry(msg) {
        const value = msg.text?.slice(5);

        if (!value) {
            this.bot.sendMessage(msg.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–¢–∏–ø(–¥–æ–ª–≥/–¥–æ—Ö–æ–¥)  —Å—É–º–º–∞  –¥–∞—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î) –ø–æ–≤—Ç–æ—Ä(–î–∞/–ù–µ—Ç) –æ–ø–∏—Å–∞–Ω–∏–µ"');
            return;
        }

        const [type, amount, date, repeat, ...description] = value.split(' ').map(s => s.trim());

        if (!/\d\d-\d\d-\d\d\d\d/.test(date)) {
            console.log(date)
            this.bot.sendMessage(msg.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥-–º–º-–≥–≥–≥–≥');
            return;
        }

        const entry = new Entry(
            type.toLowerCase() === '–¥–æ–ª–≥' ? 'debt' : 'income',
            parseFloat(amount),
            repeat.toLowerCase() === '–¥–∞',
            parse(date, "dd-MM-yyyy", new Date()),
            description.join(' '));

        if (Storage.addEntry(msg.chat.id, entry)) {
            this.bot.sendMessage(msg.chat.id, '–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
        } else {
            this.bot.sendMessage(msg.chat.id, '–ó–∞–ø–∏—Å—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –û—à–∏–±–∫–∞ —Å –¥–∞—Ç–æ–π');
        }
    }

    deleteEntry(msg) {
        const entries = Storage.listEntries(msg.chat.id);
        if (entries.length === 0) {
            this.bot.sendMessage(msg.chat.id, '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
            return;
        }

        const response = entries.map((entry, index) =>
            `${index + 1}. ${entry.type === 'debt' ? 'üí∏ –î–æ–ª–≥' : 'üí∞ –î–æ—Ö–æ–¥'} - ${entry.amount} ‚ÇΩ\n–î–∞—Ç–∞: ${entry.date}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${entry.description}`
        ).join('\n\n');
        this.bot.sendMessage(msg.chat.id, `–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n${response}`);
        this.bot.once('message', (response) => {
            if (!response.text) {
                this.bot.sendMessage(msg.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏.');
                return;
            }
            const index = parseInt(response.text) - 1;
            const success = Storage.deleteEntry(msg.chat.id, index);
            this.bot.sendMessage(msg.chat.id, success ? '–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!' : '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏.');
        });
    }
}
